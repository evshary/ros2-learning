name: CI

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - "**"
  schedule:
    - cron: '0 1 * * *'
  # Able to call by other workflow
  workflow_call:
  # Able to call on GitHub
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

# Only needed if you use Rust
#env:
#  RUST_TOOLCHAIN: ${{ vars.RUST_TOOLCHAIN || 'stable' }}
#  CARGO_TERM_COLOR: always

jobs:
  markdown_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DavidAnson/markdownlint-cli2-action@v18
        with:
          config: '.markdownlint.yaml'
          globs: '**/*.md'

  bash_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install ShellCheck
        run: sudo apt-get install -y shellcheck
      - name: Run ShellCheck
        run: find . -name "*.sh" -print0 | xargs -0 shellcheck -e SC1091

  # python_lint_format:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: astral-sh/ruff-action@v2

  #build_test_rust:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v4
  #    - uses: dtolnay/rust-toolchain@master
  #      with:
  #        toolchain: ${{ env.RUST_TOOLCHAIN }}
  #        components: clippy
  #    - name: Run cargo check
  #      run: |
  #        cargo check --all --tests
  #    - name: Check code format
  #      run: |
  #        cargo fmt --check -- --config "unstable_features=true,imports_granularity=Crate,group_imports=StdExternalCrate"
  #    - name: Run cargo clippy
  #      run: |
  #        cargo clippy --version
  #        cargo clippy --all-targets --all-features -- -W warnings -D warnings
  #    - name: Create Documentation
  #      run: |
  #        cargo doc --no-deps --all-features
  #    - name: Run doc tests
  #      run: |
  #        cargo test

  #build_test_ros2:
  #  runs-on: ubuntu-latest
  #  container:
  #    image: rostooling/setup-ros-docker:ubuntu-noble-ros-jazzy-ros-base-latest
  #  steps:
  #  - uses: ros-tooling/setup-ros@v0.7
  #    with:
  #      required-ros-distributions: jazzy
  #  - uses: ros-tooling/action-ros-ci@v0.3
  #    with:
  #      package-name: mypkg1 mypkg2
  #      target-ros2-distro: jazzy
  #      colcon-defaults: |
  #        {
  #          "build": {
  #            "cmake-args": [
  #              "-DCMAKE_CXX_FLAGS=\"-Werror\""
  #            ]
  #          }
  #        }
  #  - uses: actions/upload-artifact@v4
  #    with:
  #      name: colcon-logs
  #      path: ros_ws/log
